/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package tampilan;

import helper.koneksi;
import java.sql.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author afgha
 */
public class DataInterview extends javax.swing.JFrame {
    /**
     * Creates new form DataInterview
     */
     private final Connection conn = new koneksi().getConnection();
    
    DefaultTableModel modelRekomendasi;
    public DataInterview() {
        initComponents();
       
         
         datatable();
         // Set model tabel ke JTable
         tabRekomendasi.setModel(modelRekomendasi);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        comboBoxBidangUsaha = new javax.swing.JComboBox<>();
        comboBoxKegunaanPlastik = new javax.swing.JComboBox<>();
        comboBoxKelebihanPlastik1 = new javax.swing.JComboBox<>();
        comboBoxKelebihanPlastik2 = new javax.swing.JComboBox<>();
        comboBoxTekananPengeluaran = new javax.swing.JComboBox<>();
        comboBoxYakinPlastik = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabRekomendasi = new javax.swing.JTable();
        tRekomendasi = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 153, 153));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Data Interview");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(114, 114, 114))
        );

        jLabel3.setText("Termasuk bidang apa usaha yang anda jalankan?");

        jLabel4.setText("Apa kegunaan plastik kemasan di bidang usaha yg anda jalankan? ");

        jLabel5.setText("Kelebihan plastik kemasan apa yang anda perlukan untuk usaha yang anda jalankan?");

        jLabel6.setText("Apakah anda berminat untuk menekan angka pengeluaran untuk platik kemasan?");

        jLabel7.setText("Apakah anda yakin plastik kemasan yang anda pakai sudah tepat untuk usaha yg anda jalankan? ");

        comboBoxBidangUsaha.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Makanan/Minuman", "Bahan Kimia (sabun,sampo,dll))", "Toserba", "Warung Sembako" }));
        comboBoxBidangUsaha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxBidangUsahaActionPerformed(evt);
            }
        });

        comboBoxKegunaanPlastik.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Membungkus makanan", "Menjadi wadah bahan kimia", "Menjadi wadah minuman", "Menjadi tas belanja" }));
        comboBoxKegunaanPlastik.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxKegunaanPlastikActionPerformed(evt);
            }
        });

        comboBoxKelebihanPlastik1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tidak berbau", "Tidak beracun", "Tahan Panas", "Tahan Bahan Kimia", "Lentur/Elastis", "Berwarna" }));

        comboBoxKelebihanPlastik2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tidak berbau", "Tidak beracun", "Tahan Panas", "Tahan Bahan Kimia", "Lentur/Elastis", "Berwarna" }));

        comboBoxTekananPengeluaran.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ya", "Tidak" }));
        comboBoxTekananPengeluaran.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxTekananPengeluaranActionPerformed(evt);
            }
        });

        comboBoxYakinPlastik.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ya", "Tidak" }));

        jButton1.setText("Cek Rekomendasi");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        tabRekomendasi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabRekomendasi);

        jLabel8.setText("Pilihan yang cocok adalah");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 634, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(comboBoxBidangUsaha, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboBoxKegunaanPlastik, 0, 1, Short.MAX_VALUE)
                            .addComponent(comboBoxKelebihanPlastik1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comboBoxKelebihanPlastik2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comboBoxTekananPengeluaran, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comboBoxYakinPlastik, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(56, 56, 56))
            .addGroup(layout.createSequentialGroup()
                .addGap(170, 170, 170)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tRekomendasi, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(267, 267, 267))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(comboBoxBidangUsaha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(comboBoxKegunaanPlastik, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(comboBoxKelebihanPlastik1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(comboBoxKelebihanPlastik2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(comboBoxTekananPengeluaran, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(comboBoxYakinPlastik, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(tRekomendasi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    void datatable() {
        Object[] baris = {"Nama Pemilihan", "Skor", "Nilai Bobot"};
        modelRekomendasi = new DefaultTableModel(null, baris);
        tabRekomendasi.setModel(modelRekomendasi);
         String sql = "SELECT i.nama_pemilihan,i.skor, r.nilai_bobot FROM interview i INNER JOIN pemilihan P ON i.nama_pemilihan = p.nama_pemilihan INNER JOIN ranking R ON R.id_pemilihan = P.id_pemilihan ORDER BY I.skor DESC, r.nilai_bobot DESC";
        try {
            Statement stat = conn.createStatement();
            ResultSet res = stat.executeQuery(sql);
            while (res.next()) {
                String nama_pemilihan = res.getString("nama_pemilihan");
                String skor = res.getString("skor");
                String nilai_bobot = res.getString("nilai_bobot");    
                String[] data = {nama_pemilihan,skor,nilai_bobot};
                modelRekomendasi.addRow(data);
            }
        } catch (SQLException ex) {
            System.out.println("Error: " + ex);
        }
        
    }
   
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
            // Ambil data dari form interview
          String bidangUsaha = comboBoxBidangUsaha.getSelectedItem().toString();
          String kegunaanPlastik = comboBoxKegunaanPlastik.getSelectedItem().toString();
          String kelebihanPlastik1 = comboBoxKelebihanPlastik1.getSelectedItem().toString();
          String kelebihanPlastik2 = comboBoxKelebihanPlastik2.getSelectedItem().toString();
          Map<String, Integer> skorMap = new HashMap<>();
          skorMap.put("LDPE", 0);
          skorMap.put("HDPE", 0);
          skorMap.put("PP", 0);
          
          // Lakukan perhitungan skor berdasarkan data interview
            if (bidangUsaha.equals("Makanan/Minuman")) {
                skorMap.put("LDPE", skorMap.get("LDPE") + 1);
            } else if (bidangUsaha.equals("Bahan Kimia (sabun,sampo,dll)")) {
                skorMap.put("HDPE", skorMap.get("HDPE") + 1);
            } else if (bidangUsaha.equals("Toserba")) {
                skorMap.put("PP", skorMap.get("PP") + 1);
            } else if (bidangUsaha.equals("Warung Sembako")) {
                skorMap.put("PP", skorMap.get("PP") + 1);
            }

            if (kegunaanPlastik.equals("Membungkus makanan")) {
                skorMap.put("LDPE", skorMap.get("LDPE") + 1);
            } else if (kegunaanPlastik.equals("Menjadi wadah bahan kimia")) {
                skorMap.put("HDPE", skorMap.get("HDPE") + 1);
            } else if (kegunaanPlastik.equals("Menjadi wadah minuman")) {
                skorMap.put("HDPE", skorMap.get("HDPE") + 1);
            } else if (kegunaanPlastik.equals("Menjadi tas belanja")) {
                skorMap.put("PP", skorMap.get("PP") + 1);
            }

            if (kelebihanPlastik1.equals("Tidak berbau")) {
                skorMap.put("PP", skorMap.get("PP") + 1);
            } else if (kelebihanPlastik1.equals("Tidak beracun")) {
                skorMap.put("PP", skorMap.get("PP") + 1);
            } else if (kelebihanPlastik1.equals("Tahan Panas")) {
                skorMap.put("PP", skorMap.get("PP") + 1);
            } else if (kelebihanPlastik1.equals("Tahan Bahan Kimia")) {
                skorMap.put("HDPE", skorMap.get("HDPE") + 1);
            } else if (kelebihanPlastik1.equals("Lentur/Elastis")) {
                skorMap.put("LDPE", skorMap.get("LDPE") + 1);
            } else if (kelebihanPlastik1.equals("Berwarna")) {
                skorMap.put("PP", skorMap.get("PP") + 1);
            }

            if (kelebihanPlastik2.equals("Tidak berbau")) {
                skorMap.put("PP", skorMap.get("PP") + 1);
            } else if (kelebihanPlastik2.equals("Tidak beracun")) {
                skorMap.put("PP", skorMap.get("PP") + 1);
            } else if (kelebihanPlastik2.equals("Tahan Panas")) {
                skorMap.put("PP", skorMap.get("PP") + 1);
            } else if (kelebihanPlastik2.equals("Tahan Bahan Kimia")) {
                skorMap.put("HDPE", skorMap.get("HDPE") + 1);
            } else if (kelebihanPlastik2.equals("Lentur/Elastis")) {
                skorMap.put("LDPE", skorMap.get("LDPE") + 1);
            } else if (kelebihanPlastik2.equals("Berwarna")) {
                skorMap.put("PP", skorMap.get("PP") + 1);
            }
            // Menambahkan data ke dalam tabel rekomendasi
            modelRekomendasi.setRowCount(0);

            // Menentukan urutan rekomendasi berdasarkan skor terbesar hingga terkecil
            skorMap.entrySet().stream()
                    .sorted(Map.Entry.<String, Integer>comparingByValue().reversed())
                    .forEach(entry -> modelRekomendasi.addRow(new Object[]{entry.getKey(), entry.getValue()}));

            // Mencari skor tertinggi dan merekomendasikan jenis plastik
            String rekomendasi = "";
            int maxSkor = Math.max(Math.max(skorMap.get("LDPE"), skorMap.get("HDPE")), skorMap.get("PP"));
            if (maxSkor == skorMap.get("LDPE")) {
                rekomendasi = "LDPE";
            } else if (maxSkor == skorMap.get("HDPE")) {
                rekomendasi = "HDPE";
            } else if (maxSkor == skorMap.get("PP")) {
                rekomendasi = "PP";
            }
            
            tRekomendasi.setText(rekomendasi);
            // Menampilkan rekomendasi
            JOptionPane.showMessageDialog(this, "Rekomendasi untuk usaha Anda: Gunakan plastik " + rekomendasi,
                    "Rekomendasi", JOptionPane.INFORMATION_MESSAGE);
            
            // Mendapatkan data dari tabel modelRekomendasi
            int rowCount = modelRekomendasi.getRowCount();
            List<String> jenisPlastikList = new ArrayList<>();
            List<Integer> skorList = new ArrayList<>();

            for (int i = 0; i < rowCount; i++) {
                String jenisPlastik = modelRekomendasi.getValueAt(i, 0).toString();
                int skor = Integer.parseInt(modelRekomendasi.getValueAt(i, 1).toString());

                jenisPlastikList.add(jenisPlastik);
                skorList.add(skor);
            }
            
            // Buat pernyataan SQL untuk menghapus semua data dari tabel interview
            String deleteSql = "DELETE FROM interview";
            PreparedStatement deleteStmt;
            try {
                deleteStmt = conn.prepareStatement(deleteSql);
                // Jalankan pernyataan SQL untuk menghapus data
                deleteStmt.executeUpdate();
            } catch (SQLException ex) {
                Logger.getLogger(DataInterview.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            // Buat pernyataan SQL untuk menyimpan data
            String sql = "INSERT INTO interview (nama_pemilihan, skor) VALUES (?, ?)";

            // Buat prepared statement untuk menghindari SQL injection
            PreparedStatement stmt = null;
            try {
                stmt = conn.prepareStatement(sql);
                // Loop untuk menyimpan setiap baris data ke database
               for (int i = 0; i < rowCount; i++) {
                   stmt.setString(1, jenisPlastikList.get(i));
                   stmt.setInt(2, skorList.get(i));

                   // Jalankan pernyataan SQL
                   stmt.executeUpdate();
               }
               datatable();

            } catch (SQLException ex) {
                Logger.getLogger(DataInterview.class.getName()).log(Level.SEVERE, null, ex);
            }
            
    }//GEN-LAST:event_jButton1ActionPerformed

    private void comboBoxKegunaanPlastikActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxKegunaanPlastikActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxKegunaanPlastikActionPerformed

    private void comboBoxBidangUsahaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxBidangUsahaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxBidangUsahaActionPerformed

    private void comboBoxTekananPengeluaranActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxTekananPengeluaranActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxTekananPengeluaranActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DataInterview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DataInterview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DataInterview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DataInterview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DataInterview().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboBoxBidangUsaha;
    private javax.swing.JComboBox<String> comboBoxKegunaanPlastik;
    private javax.swing.JComboBox<String> comboBoxKelebihanPlastik1;
    private javax.swing.JComboBox<String> comboBoxKelebihanPlastik2;
    private javax.swing.JComboBox<String> comboBoxTekananPengeluaran;
    private javax.swing.JComboBox<String> comboBoxYakinPlastik;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField tRekomendasi;
    private javax.swing.JTable tabRekomendasi;
    // End of variables declaration//GEN-END:variables
}
